# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :inetRouter => {
        :box_name => "centos/7",
        :net => [
                   {adapter: 2, auto_config: false, virtualbox__intnet: "router-net"},
		   {adapter: 3, auto_config: false, virtualbox__intnet: "router-net"},
                ]
  },
  :centralRouter => {
        :box_name => "centos/7",
        :net => [
		   {ip: '192.168.0.1', adapter: 4, netmask: "255.255.255.240", virtualbox__intnet: "dir-net"},
		    #teaming
                   {adapter: 2, auto_config: false, virtualbox__intnet: "router-net"},
		   {adapter: 3, auto_config: false, virtualbox__intnet: "router-net"},
                ]
  },
  :testClient1 => {
        :box_name => "centos/7",
        :net => [
		  {adapter: 2, auto_config: false, virtualbox__intnet: "test-LAN"}
                ]
  },
  :testClient2 => {
        :box_name => "centos/7",
        :net => [
                  {adapter: 2, auto_config: false, virtualbox__intnet: "test-LAN"}
                ]
  },
  :testServer1 => {
        :box_name => "centos/7",
        :net => [
		  {adapter: 2, auto_config: false, virtualbox__intnet: "test-LAN"}
                ]
  },
  :testServer2 => {
        :box_name => "centos/7",
        :net => [
		  {adapter: 2, auto_config: false, virtualbox__intnet: "test-LAN"}
                ]
  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|
    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s

	config.vm.box_check_update = false

        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
        
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
        end

        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
                cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        
        case boxname.to_s
### created Servers (Bonding) ->
        when "inetRouter"
	  box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "256"]
          end
	  #config.vm.network "public_network", bridge: "Intel(R) 82579LM Gigabit Network Connection"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
	    echo -e 'DEVICE=bond0\nONBOOT=yes\nTYPE=Bond\nBONDING_MASTER=yes\nIPADDR=192.168.255.1\nPREFIX=30\nBOOTPROTO=static\nBONDING_OPTS="mode=1 miimon=100 fail_over_mac=1"' > /etc/sysconfig/network-scripts/ifcfg-bond0
	    echo -e "BOOTPROTO=none\nONBOOT=yes\nDEVICE=eth1\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth1
	    echo -e "BOOTPROTO=none\nONBOOT=yes\nDEVICE=eth2\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth2
	    echo "net.ipv4.conf.all.forwarding=1" > /etc/sysctl.d/99-sysctl.conf && sysctl -p
            iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
	    systemctl restart network
          SHELL
        when "centralRouter"
          box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "256"]
          end  
	  box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
	    echo -e 'DEVICE=bond0\nONBOOT=yes\nTYPE=Bond\nBONDING_MASTER=yes\nIPADDR=192.168.255.2\nPREFIX=30\nBOOTPROTO=static\nBONDING_OPTS="mode=1 miimon=100 fail_over_mac=1"\nGATEWAY=192.168.255.1' > /etc/sysconfig/network-scripts/ifcfg-bond0
            echo -e "BOOTPROTO=none\nONBOOT=yes\nDEVICE=eth6\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth6
            echo -e "BOOTPROTO=none\nONBOOT=yes\nDEVICE=eth7\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth7
            echo "192.168.1.0/24 via 192.168.255.10" > /etc/sysconfig/network-scripts/route-eth5
            echo "192.168.2.0/24 via 192.168.255.6" > /etc/sysconfig/network-scripts/route-eth4
            echo "net.ipv4.conf.all.forwarding=1" > /etc/sysctl.d/99-sysctl.conf && sysctl -p
            iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o bond0 -j MASQUERADE
            systemctl restart network
          SHELL
	when "testClient1"
          box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "256"]
          end
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
            echo -e "ONBOOT=yes\nVLAN=yes\nBOOTPROTO=static\nTYPE=Ethernet\nDEVICE=eth1.1\nNM_CONTROLLED=no\nIPADDR=10.10.10.254\nPREFIX=24" > /etc/sysconfig/network-scripts/ifcfg-eth1.1
	    systemctl restart network
	    cp -a /vagrant/id_rsa /home/vagrant/.ssh/
          SHELL
	when "testServer1"
          box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "256"]
          end
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
	    echo -e "ONBOOT=yes\nVLAN=yes\nBOOTPROTO=static\nTYPE=Ethernet\nDEVICE=eth1.1\nNM_CONTROLLED=no\nIPADDR=10.10.10.1\nPREFIX=24" > /etc/sysconfig/network-scripts/ifcfg-eth1.1
            systemctl restart network
	    cat /vagrant/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
          SHELL
	when "testClient2"
          box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "256"]
          end
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
	    echo -e "ONBOOT=yes\nVLAN=yes\nBOOTPROTO=static\nTYPE=Ethernet\nDEVICE=eth1.2\nNM_CONTROLLED=no\nIPADDR=10.10.10.254\nPREFIX=24" > /etc/sysconfig/network-scripts/ifcfg-eth1.2
            systemctl restart network
	    cp -a /vagrant/id_rsa /home/vagrant/.ssh/
          SHELL
	when "testServer2"
          box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "256"]
          end
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
	    echo -e "ONBOOT=yes\nVLAN=yes\nBOOTPROTO=static\nTYPE=Ethernet\nDEVICE=eth1.2\nNM_CONTROLLED=no\nIPADDR=10.10.10.1\nPREFIX=24" > /etc/sysconfig/network-scripts/ifcfg-eth1.2
            systemctl restart network
	    cat /vagrant/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
          SHELL
      end
  end
end


